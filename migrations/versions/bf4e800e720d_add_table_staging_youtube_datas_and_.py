"""add table staging_youtube_datas and delete column predictions

Revision ID: bf4e800e720d
Revises: 9db269063385
Create Date: 2025-09-25 00:05:24.564873

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bf4e800e720d'
down_revision: Union[str, Sequence[str], None] = '9db269063385'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_dag_schedule_asset_uri_reference_dag_id'), table_name='dag_schedule_asset_uri_reference')
    op.drop_table('dag_schedule_asset_uri_reference')
    op.drop_table('slot_pool')
    op.drop_table('dag_owner_attributes')
    op.drop_index(op.f('ti_dag_run'), table_name='task_instance')
    op.drop_index(op.f('ti_dag_state'), table_name='task_instance')
    op.drop_index(op.f('ti_heartbeat'), table_name='task_instance')
    op.drop_index(op.f('ti_pool'), table_name='task_instance')
    op.drop_index(op.f('ti_state'), table_name='task_instance')
    op.drop_index(op.f('ti_state_lkp'), table_name='task_instance')
    op.drop_index(op.f('ti_trigger_id'), table_name='task_instance')
    op.drop_table('task_instance')
    op.drop_table('callback_request')
    op.drop_table('dag_code')
    op.drop_table('task_instance_note')
    op.drop_table('serialized_dag')
    op.drop_index(op.f('idx_log_dttm'), table_name='log')
    op.drop_index(op.f('idx_log_event'), table_name='log')
    op.drop_index(op.f('idx_log_task_instance'), table_name='log')
    op.drop_table('log')
    op.drop_index(op.f('deadline_idx'), table_name='deadline')
    op.drop_table('deadline')
    op.drop_table('connection')
    op.drop_index(op.f('idx_asset_alias_name_unique'), table_name='asset_alias')
    op.drop_table('asset_alias')
    op.drop_table('log_template')
    op.drop_index(op.f('idx_xcom_key'), table_name='xcom')
    op.drop_index(op.f('idx_xcom_task_instance'), table_name='xcom')
    op.drop_table('xcom')
    op.drop_index(op.f('idx_dag_schedule_asset_reference_dag_id'), table_name='dag_schedule_asset_reference')
    op.drop_table('dag_schedule_asset_reference')
    op.drop_index(op.f('idx_task_outlet_asset_reference_dag_id'), table_name='task_outlet_asset_reference')
    op.drop_table('task_outlet_asset_reference')
    op.drop_index(op.f('idx_asset_trigger_asset_id'), table_name='asset_trigger')
    op.drop_index(op.f('idx_asset_trigger_trigger_id'), table_name='asset_trigger')
    op.drop_table('asset_trigger')
    op.drop_index(op.f('idx_asset_dag_run_queue_target_dag_id'), table_name='asset_dag_run_queue')
    op.drop_table('asset_dag_run_queue')
    op.drop_index(op.f('dag_id_state'), table_name='dag_run')
    op.drop_index(op.f('idx_dag_run_dag_id'), table_name='dag_run')
    op.drop_index(op.f('idx_dag_run_queued_dags'), table_name='dag_run', postgresql_where="((state)::text = 'queued'::text)")
    op.drop_index(op.f('idx_dag_run_run_after'), table_name='dag_run')
    op.drop_index(op.f('idx_dag_run_running_dags'), table_name='dag_run', postgresql_where="((state)::text = 'running'::text)")
    op.drop_table('dag_run')
    op.drop_table('trigger')
    op.drop_index(op.f('idx_next_dagrun_create_after'), table_name='dag')
    op.drop_table('dag')
    op.drop_table('backfill')
    op.drop_index(op.f('idx_asset_id_timestamp'), table_name='asset_event')
    op.drop_table('asset_event')
    op.drop_table('import_error')
    op.drop_index(op.f('idx_tih_dag_run'), table_name='task_instance_history')
    op.drop_table('task_instance_history')
    op.drop_table('task_reschedule')
    op.drop_table('variable')
    op.drop_table('task_map')
    op.drop_table('rendered_task_instance_fields')
    op.drop_index(op.f('idx_asset_active_name_unique'), table_name='asset_active')
    op.drop_index(op.f('idx_asset_active_uri_unique'), table_name='asset_active')
    op.drop_table('asset_active')
    op.drop_table('dag_priority_parsing_request')
    op.drop_index(op.f('idx_asset_alias_asset_event_alias_id'), table_name='asset_alias_asset_event')
    op.drop_index(op.f('idx_asset_alias_asset_event_event_id'), table_name='asset_alias_asset_event')
    op.drop_table('asset_alias_asset_event')
    op.drop_index(op.f('idx_dag_schedule_asset_name_reference_dag_id'), table_name='dag_schedule_asset_name_reference')
    op.drop_table('dag_schedule_asset_name_reference')
    op.drop_index(op.f('idx_dag_warning_dag_id'), table_name='dag_warning')
    op.drop_table('dag_warning')
    op.drop_index(op.f('idx_asset_name_uri_unique'), table_name='asset')
    op.drop_table('asset')
    op.drop_table('dag_bundle')
    op.drop_index(op.f('idx_dagrun_asset_events_dag_run_id'), table_name='dagrun_asset_event')
    op.drop_index(op.f('idx_dagrun_asset_events_event_id'), table_name='dagrun_asset_event')
    op.drop_table('dagrun_asset_event')
    op.drop_table('dag_version')
    op.drop_index(op.f('idx_asset_alias_asset_alias_id'), table_name='asset_alias_asset')
    op.drop_index(op.f('idx_asset_alias_asset_asset_id'), table_name='asset_alias_asset')
    op.drop_table('asset_alias_asset')
    op.drop_index(op.f('idx_job_dag_id'), table_name='job')
    op.drop_index(op.f('idx_job_state_heartbeat'), table_name='job')
    op.drop_index(op.f('job_type_heart'), table_name='job')
    op.drop_table('job')
    op.drop_index(op.f('idx_dag_schedule_asset_alias_reference_dag_id'), table_name='dag_schedule_asset_alias_reference')
    op.drop_table('dag_schedule_asset_alias_reference')
    op.drop_table('backfill_dag_run')
    op.drop_index(op.f('idx_dag_tag_dag_id'), table_name='dag_tag')
    op.drop_table('dag_tag')
    op.drop_table('dag_run_note')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dag_run_note',
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('dag_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_run_id'], ['dag_run.id'], name=op.f('dag_run_note_dr_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_run_id', name=op.f('dag_run_note_pkey'))
    )
    op.create_table('dag_tag',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('dag_tag_dag_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('name', 'dag_id', name=op.f('dag_tag_pkey'))
    )
    op.create_index(op.f('idx_dag_tag_dag_id'), 'dag_tag', ['dag_id'], unique=False)
    op.create_table('backfill_dag_run',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('backfill_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dag_run_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exception_reason', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('logical_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('sort_ordinal', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['backfill_id'], ['backfill.id'], name=op.f('bdr_backfill_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dag_run_id'], ['dag_run.id'], name=op.f('bdr_dag_run_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('backfill_dag_run_pkey')),
    sa.UniqueConstraint('backfill_id', 'dag_run_id', name=op.f('ix_bdr_backfill_id_dag_run_id'))
    )
    op.create_table('dag_schedule_asset_alias_reference',
    sa.Column('alias_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['alias_id'], ['asset_alias.id'], name=op.f('dsaar_asset_alias_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('dsaar_dag_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('alias_id', 'dag_id', name=op.f('dsaar_pkey'))
    )
    op.create_index(op.f('idx_dag_schedule_asset_alias_reference_dag_id'), 'dag_schedule_asset_alias_reference', ['dag_id'], unique=False)
    op.create_table('job',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('job_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('latest_heartbeat', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('executor_class', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('hostname', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('unixname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('job_pkey'))
    )
    op.create_index(op.f('job_type_heart'), 'job', ['job_type', 'latest_heartbeat'], unique=False)
    op.create_index(op.f('idx_job_state_heartbeat'), 'job', ['state', 'latest_heartbeat'], unique=False)
    op.create_index(op.f('idx_job_dag_id'), 'job', ['dag_id'], unique=False)
    op.create_table('asset_alias_asset',
    sa.Column('alias_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['alias_id'], ['asset_alias.id'], name=op.f('asset_alias_asset_alias_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], name=op.f('asset_alias_asset_asset_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('alias_id', 'asset_id', name=op.f('asset_alias_asset_pkey'))
    )
    op.create_index(op.f('idx_asset_alias_asset_asset_id'), 'asset_alias_asset', ['asset_id'], unique=False)
    op.create_index(op.f('idx_asset_alias_asset_alias_id'), 'asset_alias_asset', ['alias_id'], unique=False)
    op.create_table('dag_version',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('bundle_name', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('bundle_version', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name='dag_version_dag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='dag_version_pkey'),
    sa.UniqueConstraint('dag_id', 'version_number', name='dag_id_v_name_v_number_unique_constraint'),
    postgresql_ignore_search_path=False
    )
    op.create_table('dagrun_asset_event',
    sa.Column('dag_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_run_id'], ['dag_run.id'], name=op.f('dagrun_asset_event_dag_run_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['event_id'], ['asset_event.id'], name=op.f('dagrun_asset_event_event_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_run_id', 'event_id', name=op.f('dagrun_asset_event_pkey'))
    )
    op.create_index(op.f('idx_dagrun_asset_events_event_id'), 'dagrun_asset_event', ['event_id'], unique=False)
    op.create_index(op.f('idx_dagrun_asset_events_dag_run_id'), 'dagrun_asset_event', ['dag_run_id'], unique=False)
    op.create_table('dag_bundle',
    sa.Column('name', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('last_refreshed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name='dag_bundle_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('asset',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('asset_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.Column('uri', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.Column('group', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.Column('extra', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='asset_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_asset_name_uri_unique'), 'asset', ['name', 'uri'], unique=True)
    op.create_table('dag_warning',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('warning_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('dcw_dag_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'warning_type', name=op.f('dag_warning_pkey'))
    )
    op.create_index(op.f('idx_dag_warning_dag_id'), 'dag_warning', ['dag_id'], unique=False)
    op.create_table('dag_schedule_asset_name_reference',
    sa.Column('name', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('dsanr_dag_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('name', 'dag_id', name=op.f('dsanr_pkey'))
    )
    op.create_index(op.f('idx_dag_schedule_asset_name_reference_dag_id'), 'dag_schedule_asset_name_reference', ['dag_id'], unique=False)
    op.create_table('asset_alias_asset_event',
    sa.Column('alias_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['alias_id'], ['asset_alias.id'], name=op.f('asset_alias_asset_event_alias_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['event_id'], ['asset_event.id'], name=op.f('asset_alias_asset_event_event_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('alias_id', 'event_id', name=op.f('asset_alias_asset_event_pkey'))
    )
    op.create_index(op.f('idx_asset_alias_asset_event_event_id'), 'asset_alias_asset_event', ['event_id'], unique=False)
    op.create_index(op.f('idx_asset_alias_asset_event_alias_id'), 'asset_alias_asset_event', ['alias_id'], unique=False)
    op.create_table('dag_priority_parsing_request',
    sa.Column('id', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('bundle_name', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('relative_fileloc', sa.VARCHAR(length=2000), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('dag_priority_parsing_request_pkey'))
    )
    op.create_table('asset_active',
    sa.Column('name', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.Column('uri', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['name', 'uri'], ['asset.name', 'asset.uri'], name=op.f('asset_active_asset_name_uri_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('name', 'uri', name=op.f('asset_active_pkey'))
    )
    op.create_index(op.f('idx_asset_active_uri_unique'), 'asset_active', ['uri'], unique=True)
    op.create_index(op.f('idx_asset_active_name_unique'), 'asset_active', ['name'], unique=True)
    op.create_table('rendered_task_instance_fields',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('rendered_fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('k8s_pod_yaml', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name=op.f('rtif_ti_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'task_id', 'run_id', 'map_index', name=op.f('rendered_task_instance_fields_pkey'))
    )
    op.create_table('task_map',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('length', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('keys', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint('length >= 0', name=op.f('ck_task_map_task_map_length_not_negative')),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name=op.f('task_map_task_instance_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'task_id', 'run_id', 'map_index', name=op.f('task_map_pkey'))
    )
    op.create_table('variable',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('val', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('variable_pkey')),
    sa.UniqueConstraint('key', name=op.f('variable_key_uq'))
    )
    op.create_table('task_reschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ti_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reschedule_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['ti_id'], ['task_instance.id'], name=op.f('task_reschedule_ti_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('task_reschedule_pkey'))
    )
    op.create_table('task_instance_history',
    sa.Column('task_instance_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('try_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('max_tries', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=True),
    sa.Column('hostname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('unixname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('pool', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('pool_slots', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('queue', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('priority_weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('operator', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('custom_operator_name', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('queued_dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('scheduled_dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('queued_by_job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('executor', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('executor_config', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('rendered_map_index', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('context_carrier', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('span_status', sa.VARCHAR(length=250), server_default=sa.text("'not_started'::character varying"), autoincrement=False, nullable=False),
    sa.Column('external_executor_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('trigger_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trigger_timeout', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_method', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('next_kwargs', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('task_display_name', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('dag_version_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name=op.f('task_instance_history_ti_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_instance_id', name=op.f('task_instance_history_pkey')),
    sa.UniqueConstraint('dag_id', 'task_id', 'run_id', 'map_index', 'try_number', name=op.f('task_instance_history_dtrt_uq'))
    )
    op.create_index(op.f('idx_tih_dag_run'), 'task_instance_history', ['dag_id', 'run_id'], unique=False)
    op.create_table('import_error',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('bundle_name', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('stacktrace', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('import_error_pkey'))
    )
    op.create_table('asset_event',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('extra', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('source_task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('source_dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('source_run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('source_map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('asset_event_pkey'))
    )
    op.create_index(op.f('idx_asset_id_timestamp'), 'asset_event', ['asset_id', 'timestamp'], unique=False)
    op.create_table('backfill',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('backfill_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('from_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('to_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('dag_run_conf', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_paused', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('reprocess_behavior', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('max_active_runs', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='backfill_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('dag',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('is_paused', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_stale', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_parsed_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_expired', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('fileloc', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('relative_fileloc', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('bundle_name', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('bundle_version', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('owners', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('dag_display_name', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timetable_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timetable_description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('asset_expression', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('max_active_tasks', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_active_runs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_consecutive_failed_dag_runs', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('has_task_concurrency_limits', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('has_import_errors', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('next_dagrun', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_dagrun_data_interval_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_dagrun_data_interval_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_dagrun_create_after', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bundle_name'], ['dag_bundle.name'], name='dag_bundle_name_fkey'),
    sa.PrimaryKeyConstraint('dag_id', name='dag_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_next_dagrun_create_after'), 'dag', ['next_dagrun_create_after'], unique=False)
    op.create_table('trigger',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('trigger_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('classpath', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('kwargs', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('triggerer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='trigger_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('dag_run',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('dag_run_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('queued_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('logical_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('creating_job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('run_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('triggered_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('conf', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_interval_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('data_interval_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('run_after', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_scheduling_decision', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('log_template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('clear_number', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('backfill_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bundle_version', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('scheduled_by_job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('context_carrier', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('span_status', sa.VARCHAR(length=250), server_default=sa.text("'not_started'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_dag_version_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['backfill_id'], ['backfill.id'], name='dag_run_backfill_id_fkey'),
    sa.ForeignKeyConstraint(['created_dag_version_id'], ['dag_version.id'], name='created_dag_version_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['log_template_id'], ['log_template.id'], name='task_instance_log_template_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='dag_run_pkey'),
    sa.UniqueConstraint('dag_id', 'logical_date', name='dag_run_dag_id_logical_date_key'),
    sa.UniqueConstraint('dag_id', 'run_id', name='dag_run_dag_id_run_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_dag_run_running_dags'), 'dag_run', ['state', 'dag_id'], unique=False, postgresql_where="((state)::text = 'running'::text)")
    op.create_index(op.f('idx_dag_run_run_after'), 'dag_run', ['run_after'], unique=False)
    op.create_index(op.f('idx_dag_run_queued_dags'), 'dag_run', ['state', 'dag_id'], unique=False, postgresql_where="((state)::text = 'queued'::text)")
    op.create_index(op.f('idx_dag_run_dag_id'), 'dag_run', ['dag_id'], unique=False)
    op.create_index(op.f('dag_id_state'), 'dag_run', ['dag_id', 'state'], unique=False)
    op.create_table('asset_dag_run_queue',
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], name=op.f('adrq_asset_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_dag_id'], ['dag.dag_id'], name=op.f('adrq_dag_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('asset_id', 'target_dag_id', name=op.f('assetdagrunqueue_pkey'))
    )
    op.create_index(op.f('idx_asset_dag_run_queue_target_dag_id'), 'asset_dag_run_queue', ['target_dag_id'], unique=False)
    op.create_table('asset_trigger',
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trigger_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], name=op.f('asset_trigger_asset_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trigger_id'], ['trigger.id'], name=op.f('asset_trigger_trigger_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('asset_id', 'trigger_id', name=op.f('asset_trigger_pkey'))
    )
    op.create_index(op.f('idx_asset_trigger_trigger_id'), 'asset_trigger', ['trigger_id'], unique=False)
    op.create_index(op.f('idx_asset_trigger_asset_id'), 'asset_trigger', ['asset_id'], unique=False)
    op.create_table('task_outlet_asset_reference',
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], name=op.f('toar_asset_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('toar_dag_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('asset_id', 'dag_id', 'task_id', name=op.f('toar_pkey'))
    )
    op.create_index(op.f('idx_task_outlet_asset_reference_dag_id'), 'task_outlet_asset_reference', ['dag_id'], unique=False)
    op.create_table('dag_schedule_asset_reference',
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], name=op.f('dsar_asset_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('dsar_dag_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('asset_id', 'dag_id', name=op.f('dsar_pkey'))
    )
    op.create_index(op.f('idx_dag_schedule_asset_reference_dag_id'), 'dag_schedule_asset_reference', ['dag_id'], unique=False)
    op.create_table('xcom',
    sa.Column('dag_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name=op.f('xcom_task_instance_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_run_id', 'task_id', 'map_index', 'key', name=op.f('xcom_pkey'))
    )
    op.create_index(op.f('idx_xcom_task_instance'), 'xcom', ['dag_id', 'task_id', 'run_id', 'map_index'], unique=False)
    op.create_index(op.f('idx_xcom_key'), 'xcom', ['key'], unique=False)
    op.create_table('log_template',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('log_template_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('elasticsearch_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='log_template_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('asset_alias',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.Column('group', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('asset_alias_pkey'))
    )
    op.create_index(op.f('idx_asset_alias_name_unique'), 'asset_alias', ['name'], unique=True)
    op.create_table('connection',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('conn_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('conn_type', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('host', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('schema', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('login', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_extra_encrypted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('extra', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('connection_pkey')),
    sa.UniqueConstraint('conn_id', name=op.f('connection_conn_id_uq'))
    )
    op.create_table('deadline',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('dagrun_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('callback', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('callback_kwargs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('deadline_dag_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dagrun_id'], ['dag_run.id'], name=op.f('deadline_dagrun_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('deadline_pkey'))
    )
    op.create_index(op.f('deadline_idx'), 'deadline', ['deadline'], unique=False)
    op.create_table('log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('map_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event', sa.VARCHAR(length=60), autoincrement=False, nullable=True),
    sa.Column('logical_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('owner_display_name', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('extra', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('try_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('log_pkey'))
    )
    op.create_index(op.f('idx_log_task_instance'), 'log', ['dag_id', 'task_id', 'run_id', 'map_index', 'try_number'], unique=False)
    op.create_index(op.f('idx_log_event'), 'log', ['event'], unique=False)
    op.create_index(op.f('idx_log_dttm'), 'log', ['dttm'], unique=False)
    op.create_table('serialized_dag',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_compressed', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('dag_hash', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('dag_version_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_version_id'], ['dag_version.id'], name=op.f('serialized_dag_dag_version_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('serialized_dag_pkey')),
    sa.UniqueConstraint('dag_version_id', name=op.f('serialized_dag_dag_version_id_uq'))
    )
    op.create_table('task_instance_note',
    sa.Column('ti_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('content', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['ti_id'], ['task_instance.id'], name=op.f('task_instance_note_ti_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ti_id', name=op.f('task_instance_note_pkey'))
    )
    op.create_table('dag_code',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('fileloc', sa.VARCHAR(length=2000), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('source_code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('source_code_hash', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('dag_version_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_version_id'], ['dag_version.id'], name=op.f('dag_code_dag_version_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('dag_code_pkey')),
    sa.UniqueConstraint('dag_version_id', name=op.f('dag_code_dag_version_id_uq'))
    )
    op.create_table('callback_request',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('priority_weight', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('callback_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('callback_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('callback_request_pkey'))
    )
    op.create_table('task_instance',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('try_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_tries', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=True),
    sa.Column('hostname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('unixname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('pool', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('pool_slots', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('queue', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('priority_weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('operator', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('custom_operator_name', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('queued_dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('scheduled_dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('queued_by_job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_heartbeat_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('pid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('executor', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('executor_config', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('rendered_map_index', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('context_carrier', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('span_status', sa.VARCHAR(length=250), server_default=sa.text("'not_started'::character varying"), autoincrement=False, nullable=False),
    sa.Column('external_executor_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('trigger_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trigger_timeout', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_method', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('next_kwargs', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('task_display_name', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('dag_version_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dag_id', 'run_id'], ['dag_run.dag_id', 'dag_run.run_id'], name=op.f('task_instance_dag_run_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dag_version_id'], ['dag_version.id'], name=op.f('task_instance_dag_version_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trigger_id'], ['trigger.id'], name=op.f('task_instance_trigger_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('task_instance_pkey')),
    sa.UniqueConstraint('dag_id', 'task_id', 'run_id', 'map_index', name=op.f('task_instance_composite_key'))
    )
    op.create_index(op.f('ti_trigger_id'), 'task_instance', ['trigger_id'], unique=False)
    op.create_index(op.f('ti_state_lkp'), 'task_instance', ['dag_id', 'task_id', 'run_id', 'state'], unique=False)
    op.create_index(op.f('ti_state'), 'task_instance', ['state'], unique=False)
    op.create_index(op.f('ti_pool'), 'task_instance', ['pool', 'state', 'priority_weight'], unique=False)
    op.create_index(op.f('ti_heartbeat'), 'task_instance', ['last_heartbeat_at'], unique=False)
    op.create_index(op.f('ti_dag_state'), 'task_instance', ['dag_id', 'state'], unique=False)
    op.create_index(op.f('ti_dag_run'), 'task_instance', ['dag_id', 'run_id'], unique=False)
    op.create_table('dag_owner_attributes',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('link', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('dag.dag_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'owner', name=op.f('dag_owner_attributes_pkey'))
    )
    op.create_table('slot_pool',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pool', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('slots', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('include_deferred', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('slot_pool_pkey')),
    sa.UniqueConstraint('pool', name=op.f('slot_pool_pool_uq'))
    )
    op.create_table('dag_schedule_asset_uri_reference',
    sa.Column('uri', sa.VARCHAR(length=1500), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name=op.f('dsaur_dag_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uri', 'dag_id', name=op.f('dsaur_pkey'))
    )
    op.create_index(op.f('idx_dag_schedule_asset_uri_reference_dag_id'), 'dag_schedule_asset_uri_reference', ['dag_id'], unique=False)
    # ### end Alembic commands ###
